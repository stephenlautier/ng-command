{"version":3,"sources":["command.module.ts","command.svc.ts","ng-command.js"],"names":["ngCommand","ngCommand.Command","ngCommand.Command.constructor","ngCommand.Command.execute"],"mappings":"AAAA,IAAU;AAAV,CAAA,UAAU,WAAU;IAERA,UAAAA,aAAaA;IAExBA,IAAIA,MAAMA,QAAQA,OAAOA,UAAAA,YAAYA;GAJ5B,cAAA,YAAS;;ACAnB,IAAU;AAAV,CAAA,UAAU,WAAU;IASnBA,IAAAA,UAAAA,CAAAA,YAAAA;QASCC,SAAAA,QACCA,QACAA,SACAA,YAA0BA;YAZ5BC,IAAAA,QAAAA;YAeEA,KAAKA,YAAYA;YACjBA,KAAKA,eAAeA;YACpBA,KAAKA,cAAcA;YAEnBA,OAAOA,OAAOA,YAAAA;gBACbA,OAAOA;oBACNA,aAAaA,MAAKA;oBAClBA,YAAYA,MAAKA,gBAAgBA,MAAKA;;eAErCA,UAACA,UAAUA,UAAQA;;gBAErBA,MAAKA,aAAaA,CAACA,SAASA,eAAeA,CAACA,CAACA,SAASA;eACpDA;;QAGJD,QAAAA,UAAAA,UAAAA,YAAAA;YAAAE,IAAAA,QAAAA;YAECA,IAAIA,KAAKA,aAAaA;;gBAErBA;;YAGDA,IAAIA,KAAKA,cAAcA,CAACA,KAAKA,gBAAgBA;;gBAE5CA;;YAEDA,KAAKA,cAAcA;YACnBA,OAAOA,KAAKA;iBACVA,QAAQA,YAAAA;gBACRA,MAAKA,cAAcA;;;QA3CfF,QAAAA,KAAKA;QA+CbA,OAAAA;;IAhDaD,UAAAA,UAAOA;IAsDpBA,QAAQA,OAAOA,UAAUA;SACvBA,QAAQA,aAAaA,YAAAA;QAErBA,OAAOA,UAACA,QAAwBA,SAAsCA,YAA0BA;YAC/FA,OAAOA,IAAIA,QAAQA,QAAQA,SAASA;;;GAnE9B,cAAA,YAAS;ACmDnB","file":"ng-command.js","sourcesContent":["namespace ngCommand {\r\n\r\n\texport var ModuleName = \"ng-command\";\r\n\r\n\tvar app = angular.module(ModuleName, [\r\n\r\n\t]);\r\n\r\n\r\n}","namespace ngCommand {\r\n\r\n\texport interface ICommand {\r\n\r\n\t\tisExecuting: boolean;\r\n\t\tcanExecute: boolean;\r\n\t\texecute: () => angular.IPromise<any>;\r\n\t}\r\n\r\n\texport class Command implements ICommand {\r\n\t\tstatic id = \"_commandInstance\"\r\n\r\n\t\tprivate canExecuteFn: () => boolean;\r\n\t\tprivate executeFn: () => angular.IPromise<any>;\r\n\r\n\t\tisExecuting: boolean;\r\n\t\tcanExecute: boolean;\r\n\r\n\t\tconstructor(\r\n\t\t\t$scope: angular.IScope,\r\n\t\t\texecute: () => angular.IPromise<any>,\r\n\t\t\tcanExecute?: () => boolean\r\n\t\t\t) {\r\n\r\n\t\t\tthis.executeFn = execute;\r\n\t\t\tthis.canExecuteFn = canExecute;\r\n\t\t\tthis.isExecuting = false;\r\n\r\n\t\t\t$scope.$watch(() => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tisExecuting: this.isExecuting,\r\n\t\t\t\t\tcanExecute: this.canExecuteFn && this.canExecuteFn()\r\n\t\t\t\t};\r\n\t\t\t}, (newValue, oldValue) => {\r\n\t\t\t\t//this.logger.info(\"$watch.canExecute\", \"Handle change!\", newValue);\r\n\t\t\t\tthis.canExecute = !newValue.isExecuting && !!newValue.canExecute;\r\n\t\t\t}, true);\r\n\t\t}\r\n\r\n\t\texecute(): angular.IPromise<any> {\r\n\r\n\t\t\tif (this.isExecuting) {\r\n\t\t\t\t//this.logger.info(\"handleExecute\", \"Still executing! exit.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.canExecute && !this.canExecuteFn()) {\r\n\t\t\t\t//this.logger.info(\"handleExecute\", \"Can execute states nope!\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.isExecuting = true;\r\n\t\t\treturn this.executeFn()\r\n\t\t\t\t.finally(() => {\r\n\t\t\t\t\tthis.isExecuting = false;\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\r\n\texport interface ICommandFactory {\r\n\t\t($scope: angular.IScope, execute: () => angular.IPromise<any>, canExecute?: () => boolean): ICommand;\r\n\t}\r\n\r\n\tangular.module(ngCommand.ModuleName)\r\n\t\t.factory(\"ngCommand\", () => {\r\n\r\n\t\t\treturn ($scope: angular.IScope, execute: () => angular.IPromise<any>, canExecute?: () => boolean): ICommand => {\r\n\t\t\t\treturn new Command($scope, execute, canExecute);\r\n\t\t\t};\r\n\r\n\t\t});\r\n\r\n}","var ngCommand;\n(function (ngCommand) {\n    ngCommand.ModuleName = \"ng-command\";\n    var app = angular.module(ngCommand.ModuleName, []);\n})(ngCommand || (ngCommand = {}));\n\nvar ngCommand;\n(function (ngCommand) {\n    var Command = (function () {\n        function Command($scope, execute, canExecute) {\n            var _this = this;\n            this.executeFn = execute;\n            this.canExecuteFn = canExecute;\n            this.isExecuting = false;\n            $scope.$watch(function () {\n                return {\n                    isExecuting: _this.isExecuting,\n                    canExecute: _this.canExecuteFn && _this.canExecuteFn()\n                };\n            }, function (newValue, oldValue) {\n                //this.logger.info(\"$watch.canExecute\", \"Handle change!\", newValue);\n                _this.canExecute = !newValue.isExecuting && !!newValue.canExecute;\n            }, true);\n        }\n        Command.prototype.execute = function () {\n            var _this = this;\n            if (this.isExecuting) {\n                //this.logger.info(\"handleExecute\", \"Still executing! exit.\");\n                return;\n            }\n            if (this.canExecute && !this.canExecuteFn()) {\n                //this.logger.info(\"handleExecute\", \"Can execute states nope!\");\n                return;\n            }\n            this.isExecuting = true;\n            return this.executeFn()\n                .finally(function () {\n                _this.isExecuting = false;\n            });\n        };\n        Command.id = \"_commandInstance\";\n        return Command;\n    })();\n    ngCommand.Command = Command;\n    angular.module(ngCommand.ModuleName)\n        .factory(\"ngCommand\", function () {\n        return function ($scope, execute, canExecute) {\n            return new Command($scope, execute, canExecute);\n        };\n    });\n})(ngCommand || (ngCommand = {}));\n"],"sourceRoot":"/source/"}